import numpy as np
from unzipper import get_vector_dict
from keras.models import load_model
from keras.preprocessing.sequence import pad_sequences 

max_review_length = 20 #maximum length of the sentence

model_filename = './241019_1600_model.h5'
w2v_filepath = "/Users/davidgoh/Desktop/sgns.weibo.bigram-char.bz2"


word2int = {'吗': 1, '的': 2, '我': 3, '了': 4, '交': 5, '保': 6, '社': 7, '么': 8, '月': 9, '以': 10, '是': 11, '可': 12, '缴': 13, '要': 14, '好': 15, '不': 16, '个': 17, '一': 18, '公': 19, '有': 20, '这': 21, '下': 22, '金': 23, '你': 24, '上': 25, '在': 26, '能': 27, '怎': 28, '什': 29, '积': 30, '多': 31, '吧': 32, '补': 33, '，': 34, '那': 35, '谢': 36, '问': 37, '费': 38, '呢': 39, '少': 40, '拍': 41, '没': 42, '需': 43, '付': 44, '海': 45, '代': 46, '就': 47, '州': 48, '想': 49, '份': 50, '钱': 51, '办': 52, '还': 53, '纳': 54, '5': 55, '户': 56, '到': 57, '们': 58, '已': 59, '现': 60, '看': 61, '哦': 62, '款': 63, '提': 64, '啊': 65, '用': 66, '只': 67, '时': 68, '查': 69, '都': 70, '行': 71, '司': 72, '前': 73, '经': 74, '险': 75, '单': 76, '之': 77, '给': 78, '五': 79, '职': 80, '请': 81, '人': 82, '对': 83, '理': 84, '嗯': 85, '询': 86, '几': 87, '啥': 88, '最': 89, '断': 90, '去': 91, '信': 92, '填': 93, '直': 94, '接': 95, '4': 96, '帮': 97, '来': 98, '成': 99, '后': 100, '区': 101, '料': 102, '续': 103, '过': 104, '麻': 105, '烦': 106, '表情': 107, '会': 108, '贷': 109, '号': 110, '哪': 111, '基': 112, '杭': 113, '生': 114, '样': 115, '收': 116, '开': 117, '边': 118, '影': 119, '响': 120, '资': 121, '转': 122, '落': 123, '明': 124, '里': 125, '买': 126, '也': 127, '天': 128, '话': 129, '证': 130, '房': 131, '工': 132, '说': 133, '程': 134, '您': 135, '退': 136, '数': 137, '候': 138, '为': 139, '三': 140, '息': 141, '哈': 142, '如': 143, '卡': 144, '出': 145, '做': 146, '亲': 147, '先': 148, '作': 149, '知': 150, '完': 151, '年': 152, '务': 153, '事': 154, '和': 155, '离': 156, '税': 157, '地': 158, '小': 159, '道': 160, '停': 161, '入': 162, '间': 163, '低': 164, '北': 165, '京': 166, '意': 167, '服': 168, '中': 169, '新': 170, '广': 171, '供': 172, '合': 173, '家': 174, '分': 175, '找': 176, '日': 177, '本': 178, '育': 179, '别': 180, '思': 181, '发': 182, '算': 183, '快': 184, '啦': 185, '再': 186, '期': 187, '同': 188, '咨': 189, '苏': 190, '果': 191, '码': 192, '写': 193, '始': 194, '回': 195, '2': 196, '手': 197, '调': 198, '才': 199, '嘛': 200, '忙': 201, '得': 202, '及': 203, '准': 204, '备': 205, '加': 206, '解': 207, '流': 208, '链': 209, '额': 210, '电': 211, '材': 212, '题': 213, '住': 214, '学': 215, '长': 216, '选': 217, '四': 218, '验': 219, '业': 220, '每': 221, '晚': 222, '6': 223, '今': 224, '功': 225, '应': 226, '参': 227, '按': 228, '必': 229, '受': 230, '重': 231, '部': 232, '方': 233, '度': 234, '名': 235, '很': 236, '两': 237, '老': 238, '沙': 239, '所': 240, '外': 241, '0': 242, '10': 243, '3': 244, '些': 245, '比': 246, '呀': 247, '但': 248, '确': 249, '定': 250, '进': 251, '7': 252, '刚': 253, '截': 254, 'ok': 255, '联': 256, '系': 257, '嗷': 258, '正': 259, '忘': 260, '记': 261, '弄': 262, '次': 263, '价': 264, '取': 265, '封': 266, '存': 267, '操': 268, '改': 269, '高': 270, '南': 271, '他': 272, '然': 273, '全': 274, '居': 275, '面': 276, '留': 277, '微': 278, '医': 279, '账': 280, '城': 281, '位': 282, '种': 283, '序': 284, '细': 285, '暂': 286, '包': 287, '括': 288, '通': 289, '底': 290, '法': 291, '马': 292, '贴': 293, '该': 294, '9': 295, '止': 296, '懂': 297, '报': 298, '购': 299, '须': 300, '哔': 301, '常': 302, '跟': 303, '客': 304, '首': 305, '太': 306, '淘': 307, '宝': 308, '王': 309, '连': 310, '支': 311, '恩': 312, '介': 313, '朋': 314, '友': 315, '减': 316, '点': 317, '字': 318, '籍': 319, '口': 320, '换': 321, '票': 322, '起': 323, '白': 324, '久': 325, '领': 326, '子': 327, '试': 328, '市': 329, '因': 330, '银': 331, '孩': 332, '情': 333, '况': 334, '共': 335, '园': 336, '真': 337, '综': 338, '1': 339, '11': 340, '80': 341, '30': 342, '120656': 343, '机': 344, '例': 345, '3500': 346, '觉': 347, '40': 348, '限': 349, '辞': 350, '档': 351, '26': 352, '签': 353, '具': 354, '气': 355, '漏': 356, '差': 357, '贞': 358, '大': 359, '概': 360, '便': 361, '更': 362, '读': 363, '书': 364, '送': 365, '注': 366, '绍': 367, '员': 368, '光': 369, '其': 370, '尽': 371, '认': 372, '突': 373, '汇': 374, '录': 375, '咋': 376, '叫': 377, '养': 378, '山': 379, '湖': 380, '俩': 381, '聊': 382, '六': 383, '劳': 384, '动': 385, '目': 386, '移': 387, '否': 388, '择': 389, '姐': 390, '无': 391, '津': 392, '规': 393, '自': 394, '己': 395, '怕': 396, '午': 397, '“': 398, '”': 399, '何': 400, '涨': 401, '怀': 402, '孕': 403, '搞': 404, '考': 405, '虑': 406, '她': 407, '整': 408, '维': 409, '旺': 410, '届': 411, '毕': 412, '状': 413, '态': 414, '销': 415, '享': 416, '册': 417, '院': 418, '江': 419, '当': 420, '相': 421, '文': 422, '般': 423, '照': 424, '总': 425, '活': 426, '60': 427, '图片': 428, '内': 429, '1000': 430, '50': 431, '万': 432, '103': 433, '120': 434, '元': 435, '12027': 436, '486': 437, '20': 438, '53861': 439, '15': 440, '163': 441, '1856': 442, '18621321922': 443, '19377': 444, '2000': 445, '3290': 446, '貌': 447, '似': 448, '39735': 449, '240': 450, '预': 451, '邮': 452, '箱': 453, '54': 454, '岁': 455, '58': 456, '2018': 457, '深': 458, '申': 459, '70': 460, '乘': 461, '12': 462, '840': 463, '130601': 464, 'hello': 465, 'hi': 466, 'nono': 467, 'tks': 468, 'yourenma': 469, 'zai': 470, 'ma': 471, '科': 472, '纰': 473, '承': 474, '诺': 475, '初': 476, '独': 477, '咯': 478, '稍': 479, '等': 480, '肯': 481, '蛮': 482, '贵': 483, '屋': 484, '放': 485, '心': 486, '走': 487, '告': 488, '诉': 489, '尴': 490, '尬': 491, '感': 492, '搭': 493, '嘎': 494, '。': 495, '队': 496, '够': 497, '裸': 498, '量': 499, '哒': 500, '滴': 501, '愉': 502, '厉': 503, '害': 504, '休': 505, '花': 506, '呗': 507, '黄': 508, '孟': 509, '琪': 510, '继': 511, '或': 512, '者': 513, '齐': 514, '称': 515, '复': 516, '柜': 517, '台': 518, '言': 519, '充': 520, '昆': 521, '板': 522, '省': 523, '李': 524, '亚': 525, '霏': 526, '旬': 527, '美': 528, '女': 529, '残': 530, '章': 531, '纯': 532, '八': 533, '固': 534, '从': 535, '义': 536, '赠': 537, '锡': 538, '诚': 539, '属': 540, '于': 541, '力': 542, '源': 543, '渠': 544, 'h': 545, 'r': 546, '处': 547, '式': 548, '车': 549, '牌': 550, '企': 551, '死': 552, '国': 553, '缺': 554, '班': 555, '编': 556, '变': 557, '块': 558, '郁': 559, '闷': 560, '稽': 561, '严': 562, '十': 563, '搜': 564, '址': 565, '打': 566, '扰': 567, '仓': 568, '显': 569, '示': 570, '求': 571, '挺': 572, '让': 573, '网': 574, '往': 575, '护': 576, '洛': 577, '把': 578, '推': 579, '荐': 580, 'i': 581, 'd': 582, '订': 583, '图': 584, '刷': 585, '妈': 586, '原': 587, '失': 588, '语': 589, '吴': 590, '喜': 591, '爱': 592, '满': 593, '产': 594, '欠': 595, '术': 596, '教': 597, '德': 598, '镇': 599, '辛': 600, '苦': 601, '表': 602, '姓': 603, '东': 604, '西': 605, '历': 606, '化': 607, '校': 608, '吓': 609, '周': 610, '未': 611, '使': 612, '掉': 613, '片': 614, '优': 615, '惠': 616, '体': 617, '闲': 618, '林': 619, '又': 620, '嵊': 621, '登': 622, '陆': 623, '呐': 624, '拿': 625, '二': 626, '套': 627, '由': 628, '冲': 629, '实': 630, '效': 631, '笑': 632, '锦': 633, '第': 634, '空': 635, '朱': 636, '嘉': 637, '佑': 638, '河': 639, '郑': 640, '计': 641, '假': 642}
reverse_word_map = {1: 0, 2: 'complicated', 3: 'no_intent', 4: 'purchase', 5: 'affirm', 6: 'unknown', 7: 'chitchat', 8: 'inform_paid', 9: 'query_pay_process', 10: 'ask_can_topup', 11: 'doublecheck', 12: 'ask_shebao_status', 13: 'purchase_wxyj', 14: 'greet', 15: 'thankyou', 16: 'ask_amt_month_fee_total', 17: 'query_req_resources', 18: 'check_can_pay_current_month', 19: 'confused', 20: 'inform_payment_history', 21: 'deny', 22: 'check_is_possible', 23: 'ask_verify', 24: 'get_back_later', 25: 'query_pay_deadline', 26: 'gongjijin_only', 27: 'query_when_check_shebao_status', 28: 'complain', 29: 'request_link', 30: 'query_how_check_shebao_status', 31: 'how_to_pai', 32: 'ask_for_phone', 33: 'affirm#thankyou', 34: 'inform_info_filled', 35: 'apology', 36: 'query_pay_part_only', 37: 'clarify', 38: 'report_issue', 39: 'ask_amt_service_fee', 40: 'query_product_explain', 41: 'question_why', 42: 'query_refund', 43: 'ask_for_refund', 44: 'reassure', 45: 'ask_discount', 46: 'query_weixin', 47: 'ask_turnaround_time', 48: 'missing_info', 49: 'req_check', 50: 'query_have_service_fee', 51: 'purchase_gjj', 52: 'check_anything_else', 53: 'ask_kai_piao', 54: 'query_payment_schedule', 55: 'query_canzhangjin', 56: 'pay_query', 57: 'affirm#chitchat', 58: 'next_step', 59: 'check_procedure_card', 60: 'query_wxyj_included', 61: 'request_future_notify', 62: 'query_pregnant', 63: 'check_procedure_shouce', 64: 'total_amt_query', 65: 'ask_for_details', 66: 'ask_how_now', 67: 'question_reliability'}

class Predictor:
    def __init__(self):
        print("Initalizing Predictor...")
        self.pmodel = load_model(model_filename)
        self.w2v = get_vector_dict(w2v_filepath, limit = 25000)
        self.ignore_chars = {" ", ",", "?","？","。","，"}
        self.max_review_length = 20
        print("Finished initalizing Predictor")


    def predict(self, raw):
        arr, words = self.tokenize(raw)
        raw_pred = self.pmodel.predict(arr)[0] # We want a single prediction
        intent = self.pred_to_word(raw_pred)
        return intent

    # Tokenizes and converts to int
    def tokenize(self, string):
        out = []
        words = []
        for c in string:
            if c in self.ignore_chars:
                continue

            if c in word2int:
                t = word2int[c]
            else:
                new_val = len(word2int)
                word2int[c] = new_val
                t = new_val
            if c not in words:
                words.append(c)

            out.append(t)

        out = pad_sequences([out,], self.max_review_length, dtype = object, value=0)
        # print("out",out)
        return out, c

    def pred_to_word(self,pred):
        top = 3
        total = np.sum(pred)
        s_pred = np.sort(pred,-1)
        best = None

        for i in range(top):
            curr = s_pred[-1]
            if curr == 0:
                break
            s_pred = s_pred[:-1]
            idx = np.where(pred == curr)[0][0]
            print("idx",idx,"curr",curr)
            intent = reverse_word_map[idx]
            if (best == None): best = intent 
            print("<{}> Intent:{} Confidence:{}%".format(i+1,intent,curr*100/total))
        
        return best

    def predict_loop(self):
        while 1:
            print("Please enter an input:")
            raw_inp = input()
            inp = self.tokenize(raw_inp)
            # print("pro in",inp)
            out = self.pmodel.predict([inp])
            self.pred_to_word(out)


testins = ["您好","哦了解", "一共多少", "我爱你", "代缴社保", "落户苏州", "上海社保可以吗", "我不太懂哦"]
pp = Predictor()

for testin in testins:
    out = pp.predict(testin)
    print("In:",testin,"Predicted Intent:",out)
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")